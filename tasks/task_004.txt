# Task ID: 4
# Title: Core Data Models and API Layer
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Implement the core data models and API layer for cap table, stakeholders, securities, grants, transactions, approvals, and compliance entities.
# Details:
1. Define TypeScript interfaces for all core entities in `/types/index.ts`:
   - Company, CapTable, Stakeholder, Security, Grant, Transaction, Approval, Compliance
2. Create API client utilities in `/lib/api.ts`
3. Implement React Query hooks for data fetching in `/hooks/use-queries.ts`
4. Set up mock API routes in `/app/api/mock/` for all data endpoints
5. Create sample JSON data files in `/mock/` directory based on the data specification
6. Implement error handling and loading states
7. Create data transformation utilities for visualization formats
8. Set up optimistic updates for mutations
9. Implement caching strategies for performance
10. Create mock API response delay simulation for testing

# Test Strategy:
1. Test all API endpoints with sample requests
2. Verify data model integrity across transformations
3. Test error handling with simulated failures
4. Validate caching behavior
5. Test optimistic updates for mutations
6. Verify data consistency across different views

# Subtasks:
## 1. Define core TypeScript interfaces for cap table entities [pending]
### Dependencies: None
### Description: Create TypeScript interfaces for the fundamental entities in the cap table system
### Details:
Define interfaces for Company, Stakeholder, Security, Transaction, CapTable, and other core entities. Include proper typing for all properties, relationships between entities, and consider using discriminated unions for different security types (common shares, preferred shares, options, etc.).

## 2. Implement data validation utilities [pending]
### Dependencies: 4.1
### Description: Create utility functions to validate data against the TypeScript interfaces
### Details:
Develop validation functions that can check if data objects conform to the defined interfaces. Include type guards, validation error reporting, and helper functions to ensure data integrity throughout the application.

## 3. Create data transformation utilities [pending]
### Dependencies: 4.1
### Description: Implement utility functions to transform data between API and UI formats
### Details:
Build functions that handle data normalization, denormalization, and transformation between API responses and the application's internal data structures. Include utilities for date formatting, percentage calculations, and other cap table specific transformations.

## 4. Design API client interface [pending]
### Dependencies: 4.1
### Description: Define the core API client interface for interacting with backend services
### Details:
Create a TypeScript interface for the API client that defines all methods for CRUD operations on cap table entities. Include proper typing for request parameters and response types based on the core interfaces.

## 5. Implement mock API client [pending]
### Dependencies: 4.4
### Description: Create a mock implementation of the API client for development and testing
### Details:
Develop a mock API client that implements the API client interface using in-memory data structures. Include simulated network delays, error conditions, and a comprehensive set of sample data for all entity types.

## 6. Set up API route handlers for cap tables [pending]
### Dependencies: 4.5
### Description: Implement mock API routes for cap table CRUD operations
### Details:
Create mock API endpoints for listing, creating, updating, and deleting cap tables. Include proper request validation, error handling, and response formatting according to the defined interfaces.

## 7. Set up API route handlers for stakeholders and securities [pending]
### Dependencies: 4.5
### Description: Implement mock API routes for stakeholder and security management
### Details:
Create mock API endpoints for managing stakeholders and securities, including CRUD operations for both entity types. Implement proper relationship handling between stakeholders, securities, and cap tables.

## 8. Set up API route handlers for transactions [pending]
### Dependencies: 4.5, 4.7
### Description: Implement mock API routes for transaction management
### Details:
Create mock API endpoints for recording, listing, and managing transactions such as issuances, transfers, exercises, and conversions. Ensure proper validation of transaction effects on the cap table state.

## 9. Implement base React Query hooks [pending]
### Dependencies: 4.4
### Description: Create foundational React Query hooks for data fetching
### Details:
Develop base React Query hooks that wrap the API client interface. Include proper error handling, loading states, and TypeScript typing for all hooks. Set up default query options and global configuration.

## 10. Implement entity-specific React Query hooks [pending]
### Dependencies: 4.9
### Description: Create specialized React Query hooks for each entity type
### Details:
Build React Query hooks for specific entity operations such as useCapTables, useStakeholders, useSecurities, and useTransactions. Include specialized mutation hooks for creating, updating, and deleting entities.

## 11. Develop data caching and synchronization strategy [pending]
### Dependencies: 4.10
### Description: Implement a strategy for caching and synchronizing data across the application
### Details:
Create utilities and hooks for managing the cache invalidation, optimistic updates, and data synchronization between different parts of the application. Ensure that related entities are properly updated when changes occur.

## 12. Create comprehensive test suite for data layer [pending]
### Dependencies: 4.3, 4.8, 4.11
### Description: Implement tests for the data models, API layer, and React Query hooks
### Details:
Develop unit tests for TypeScript interfaces, validation utilities, and transformation functions. Create integration tests for the API client and mock routes. Implement testing utilities for React Query hooks using React Testing Library.

